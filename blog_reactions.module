<?php
/* $Id$ */

/**
 * Blog reactions
 * 
 * Fetch blog reactions from Technorati, Blogsearch and Bloglines
 * 
 * @author Stefan Auditor <stefan.auditor@erdfisch.de>
 */

/**
 * Implementation of hook_menu().
 */
function blog_reactions_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/blog_reactions',
      'title' => t('Blog reactions'),
      'description' => t('Change blog reactions settings.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'blog_reactions_admin_settings',
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  return $items;
}

/**
 * Implementation of hook_block().
 */
function blog_reactions_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('Blog reactions'),
    );
    return $blocks;
  }
  else if ($op == 'configure' && $delta == 0) {
    $form['items'] = array(
      '#type' => 'select',
      '#title' => t('Number of items'),
      '#default_value' => variable_get('blog_reactions_block_items', 10),
      '#options' => drupal_map_assoc(array('0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100')),
      '#description' => t('Number of reactions to show. Choose 0 for no limit.'),
    );
    return $form;
  }
  else if ($op == 'save' && $delta == 0) {
    variable_set('blog_reactions_block_items', $edit['items']);
  }
  else if ($op == 'view') {
    switch($delta) {
      case 0:
        if (arg(0) == 'node' AND is_numeric(arg(1))) {
          $node = node_load(array('nid' => arg(1)));
          $blog_reactions_node_types   = variable_get('blog_reactions_node_types', array('blog'));
          $blog_reactions_node_display = variable_get('blog_reactions_node_display', FALSE);
          if (!in_array($node->type, $blog_reactions_node_types) AND !$blog_reactions_node_display) {
            return;
          }
          
          if (user_access('access blog reactions') || user_access('administer blog reactions')) {
            $block = array(
              'subject' => t('Blog reactions'),
              'content' => blog_reactions_block_1($node->nid),
            );
          }
        }
        break;
    }
    return $block;
  }
}

/**
 * Implementation of hook_perm().
 *
 * @return an array of permissions
 */
function blog_reactions_perm() {
  return array('administer blog reactions', 'access blog reactions');
}

/**
 * Implementation of hook_nodeapi().
 */
function blog_reactions_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  $blog_reactions_node_types   = variable_get('blog_reactions_node_types', array('blog'));
  $blog_reactions_node_display = variable_get('blog_reactions_node_display', FALSE);
  if (!in_array($node->type, $blog_reactions_node_types)) {
    return;
  }
  
  switch ($op) {
    case 'view':
      if ((user_access('access blog reactions') || user_access('administer blog reactions')) && $blog_reactions_node_display && !$a3) {
        if (is_array($node->blog_reactions['items'])) {
          $node->content['blog_reactions'] = array(
            '#value' => theme('blog_reactions', $node->blog_reactions['items']),
            '#weight' => 10,
          );
        }
      }
      break;
    case 'load':
      $blog_reactions_node_types = variable_get('blog_reactions_node_types', array('blog'));
      if (in_array($node->type, $blog_reactions_node_types)) {
        $node->blog_reactions['items']       = blog_reactions_get_items($node->nid);
        $node->blog_reactions['last_update'] = blog_reactions_last_update($node->nid);
      }
      break;
    case 'delete':
      db_query("DELETE FROM {blog_reactions} WHERE nid=%s", $node->nid);
      break;
  }
}

/**
 * Block to display reactions
 */
function blog_reactions_block_1($nid) {
  $node = node_load(array('nid' => $nid));
  return theme('blog_reactions_block', $node->blog_reactions['items']);
}

/**
 * Load all reactions on a node
 */
function blog_reactions_get_items($nid, $limit = 0) {
  if (!$limit) {
    $result = db_query("SELECT * FROM {blog_reactions} WHERE nid=%d ORDER BY published DESC", $nid);
  }
  else {
    $result = db_query_range("SELECT * FROM {blog_reactions} WHERE nid=%d ORDER BY published DESC", $nid, 0, $limit);
  }
  while ($reaction = db_fetch_object($result)) {
    $reactions[$reaction->brid]->brid      = $reaction->brid;
    $reactions[$reaction->brid]->title     = $reaction->title;
    $reactions[$reaction->brid]->link = array(
      'rel'          => $reaction->rel,
      'href'         => $reaction->href,
      'content_type' => $reaction->content_type,
    );
    $reactions[$reaction->brid]->comments  = $reaction->comments;
    $reactions[$reaction->brid]->content   = $reaction->content;
    $reactions[$reaction->brid]->source = array(
      $reaction->author,
      $reaction->uri,
    );
    $reactions[$reaction->brid]->published = $reaction->published;
    $reactions[$reaction->brid]->updated   = $reaction->updated;
  }
  return $reactions ? $reactions : array();
}

/**
 * Save multiple reaction items
 */
function blog_reactions_set_items($reactions = array()) {
  foreach ($reactions as $key => $item) {
    $exists = blog_reactions_item_exists($item);
    if ($exists) {
      blog_reactions_update_item($item);
    }
    else {
      blog_reactions_set_item($item);
    }
  }
}

/**
 * Check last update time
 */
function blog_reactions_last_update($nid) {
  return db_result(db_query("SELECT timestamp FROM {blog_reactions} WHERE nid=%d LIMIT 1", $nid));
}

/**
 * Save single reaction item
 */
function blog_reactions_set_item($item) {
  return db_query("INSERT INTO {blog_reactions} (nid, brid, service, title, rel, href, content_type, comments, content, author, uri, published, updated, timestamp) VALUES (%d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %d, %d, %d)", $item->nid, $item->brid, $item->service, $item->title, $item->link['rel'], $item->link['href'], $item->link['content_type'], $item->comments, $item->content, $item->source['author'], $item->source['uri'], $item->published, $item->updated, time());
}

/**
 * Load single reaction item
 */
function blog_reactions_get_item($brid) {
  return db_query("SELECT brid FROM {blog_reactions} WHERE brid='%s'", $brid);
}

/**
 * Checks whether this blog reaction already exists.
 */
function blog_reactions_item_exists($item) {
  $brid = $item->brid;
  $href = $item->href;
  $result_brid = db_result(db_query_range("SELECT COUNT(brid) as count FROM {blog_reactions} WHERE brid='%s'", $brid, 0, 1));
  $result_href = db_result(db_query_range("SELECT COUNT(brid) as count FROM {blog_reactions} WHERE href='%s'", $href, 0, 1));
  $result = $result_brid || $result_href;
  return $result ? TRUE : FALSE;
}

/**
 * Update single reaction item
 */
function blog_reactions_update_item($item) {
  return db_query("UPDATE {blog_reactions} SET nid=%d, title='%s', rel='%s', href='%s', content_type='%s', comments='%s', author='%s', uri='%s', published=%d, updated=%d, timestamp=%d WHERE brid='%s'", $item->nid, $item->title, $item->link['rel'], $item->link['href'], $item->link['content_type'], $item->comments, $item->source['author'], $item->source['uri'], $item->published, $item->updated, time(), $item->brid);
}

/**
 * Fetch XML-feed from Technorati, Blogsearch and Bloglines
 */
function blog_reactions_fetch($nid, $uri = NULL) {
  $reactions_technorati = array();
  $reactions_blogsearch = array();
  $reactions_bloglines  = array();
  $reactions_blogato    = array();
  $services = variable_get('blog_reactions_services', array('technorati', 'blogsearch', 'bloglines', 'blogato'));
  
  $data = array();
  $data = array_merge($data, module_invoke_all('blog_reactions', 'request', array('nid' => $nid, 'uri' => $uri, 'services' => $services)));

  if ($data['services']['technorati']) {
    $reactions_technorati = blog_reactions_fetch_technorati($data['nid'], $data['uri']);
  }
  if ($data['services']['blogsearch']) {
    $reactions_blogsearch = blog_reactions_fetch_blogsearch($data['nid'], $data['uri']);
  }
  if ($data['services']['bloglines']) {
    $reactions_bloglines  = blog_reactions_fetch_bloglines($data['nid'], $data['uri']);
  }
  if ($data['services']['blogato']) {
    $reactions_blogato  = blog_reactions_fetch_blogato($data['nid'], $data['uri']);
  }
  
  $reactions = array_merge($reactions_technorati, $reactions_blogsearch, $reactions_bloglines, $reactions_blogato);
  $reactions = array_merge($reactions, module_invoke_all('blog_reactions', 'result', array('nid' => $nid, 'uri' => $uri, 'reactions' => $reactions)));
  
  return $reactions;
}

/**
 * Fetch XML-Feed from feeds.technorati.com
 */
function blog_reactions_fetch_technorati($nid = NULL, $uri = NULL) {
  $feed_url    = 'http://feeds.technorati.com/search/'. ($uri ? $uri : url('node/'. $nid, NULL, NULL, TRUE));
  $comment_url = 'http://technorati.com/search/';
  $response    = drupal_http_request($feed_url);
  $xml         = simplexml_load_string($response->data);

  $data = array();
  if ($xml->channel->item) {
    foreach ($xml->channel->item as $key => $value) {
      $data["$value->guid"]->nid        = $nid;
      $data["$value->guid"]->brid       = (string) trim($value->guid);
      $data["$value->guid"]->service    = 'technorati';
      $data["$value->guid"]->title      = (string) trim($value->title);
      $data["$value->guid"]->link = array(
        'rel'           => 'alternative',
        'href'          => (string) $value->link,
        'content_type'  => 'text/html',
      );
      $data["$value->guid"]->comments   = $comment_url .(string) $value->link;
      $data["$value->guid"]->content    = (string) trim($value->description);
      $data["$value->guid"]->source = array (
        'author' => (string) trim($value->source),
        'uri'    => (string) trim(parse_url($value->link, PHP_URL_HOST)),
      );
      $data["$value->guid"]->published  = (integer) strtotime(trim($value->pubDate));
      $data["$value->guid"]->updated    = (integer) strtotime(trim($value->pubDate));
    }
  }
  if (($xml->channel->item->title == 'No results' || $xml->channel->item->title == 'No reactions') && strpos($xml->channel->item->link, 'technorati.com')) {
    unset($data);
  }
  return $data ? $data : array();
}

/**
 * Fetch XML-Feed from blogsearch.google.com
 */
function blog_reactions_fetch_blogsearch($nid = NULL, $uri = NULL) {
  $feed_url    = 'http://blogsearch.google.com/blogsearch_feeds?q=link:'. ($uri ? $uri : url('node/'. $nid, NULL, NULL, TRUE));
  $comment_url = 'http://blogsearch.google.com/blogsearch?q=link:';
  $response = drupal_http_request($feed_url);
  $xml = simplexml_load_string($response->data);

  $data = array();
  if ($xml->entry) {
    foreach ($xml->entry as $key => $value) {
      $data["$value->id"]->nid        = $nid;
      $data["$value->id"]->brid       = (string) trim($value->id);
      $data["$value->id"]->service    = 'blogsearch';
      $data["$value->id"]->title      = (string) trim($value->title);
      
      $link = (array) $value->link;
      $data["$value->id"]->link = array(
        'rel'           => (string) $link['@attributes']['rel'],
        'href'          => (string) $link['@attributes']['href'],
        'content_type'  => (string) $link['@attributes']['type'],
      );
      $data["$value->id"]->comments   = $comment_url .(string) $link['@attributes']['href'];
      $data["$value->id"]->content    = (string) trim($value->content);
      
      $author = (array) $value->author;
      $data["$value->id"]->source = array (
        'author' => (string) trim($author['name']),
        'uri'    => (string) trim($author['uri']),
      );
      $data["$value->id"]->published  = (integer) strtotime(trim($value->published));
      $data["$value->id"]->updated    = (integer) strtotime(trim($value->updated));
      $data["$value->id"]->link = array(
        'rel'           => (string) $link['@attributes']['rel'],
        'href'          => (string) $link['@attributes']['href'],
        'content_type'  => (string) $link['@attributes']['type'],
      );
    }
  }

  return $data ? $data : array();
}

/**
 * Fetch XML-Feed from bloglines.com
 */
function blog_reactions_fetch_bloglines($nid = NULL, $uri = NULL) {
  $feed_url    = 'http://www.bloglines.com/search?q=bcite:'. ($uri ? $uri : url('node/'. $nid, NULL, NULL, TRUE)) .'&format=rss';
  $comment_url = 'http://www.bloglines.com/search?q=bcite:';
  $response    = drupal_http_request($feed_url);
  $xml         = simplexml_load_string($response->data);

  $data = array();
  if ($xml->channel->item) {
    foreach ($xml->channel->item as $key => $value) {
      $data["$value->guid"]->nid        = $nid;
      $data["$value->guid"]->brid       = (string) trim($value->guid);
      $data["$value->guid"]->service    = 'bloglines';
      $data["$value->guid"]->title      = (string) trim($value->title);
      $data["$value->guid"]->link = array(
        'rel'           => 'alternative',
        'href'          => (string) $value->link,
        'content_type'  => 'text/html',
      );
      $data["$value->guid"]->comments   = $comment_url .(string) $value->link;
      $data["$value->guid"]->content    = (string) trim($value->description);
      $data["$value->guid"]->source = array (
        'author' => NULL,
        'uri'    => (string) check_plain(trim(parse_url($value->link, PHP_URL_HOST))),
      );
      $data["$value->guid"]->published  = (integer) strtotime(trim($value->pubDate));
      $data["$value->guid"]->updated    = (integer) strtotime(trim($value->pubDate));
    }
  }

  return $data ? $data : array();
}

/**
 * Fetch XML-Feed from blogato.net
 */
function blog_reactions_fetch_blogato($nid = NULL, $uri = NULL) {
  $uri = str_replace('http://', '', $uri);
  $feed_url    = 'http://www.blogato.net/rss.php?search='. ($uri ? $uri : url('node/'. $nid, NULL, NULL, TRUE));
  $response    = drupal_http_request($feed_url);
  $xml         = simplexml_load_string(utf8_encode($response->data));

  $data = array();
  if ($xml->channel->item) {
    foreach ($xml->channel->item as $key => $value) {
      $data["$value->link"]->nid        = $nid;
      $data["$value->link"]->brid       = (string) trim($value->link);
      $data["$value->link"]->service    = 'blogato';
      $data["$value->link"]->title      = (string) trim($value->title);
      $data["$value->link"]->link = array(
        'rel'           => 'alternative',
        'href'          => (string) $value->link,
        'content_type'  => 'text/html',
      );
      $data["$value->link"]->comments   = '';
      $data["$value->link"]->content    = (string) trim($value->description);
      $data["$value->link"]->source = array (
        'author' => NULL,
        'uri'    => (string) check_plain(trim(parse_url($value->link, PHP_URL_HOST))),
      );
      $data["$value->link"]->published = 0;
      $data["$value->link"]->updated   = 0;
    }
  }

  return $data ? $data : array();
}

/**
 * Implementation of hook_cron().
 */
function blog_reactions_cron() {
  $limit = variable_get('blog_reactions_cron_quantity', 20);
  $types = variable_get('blog_reactions_node_types', array('blog'));
  $last_update_nid = variable_get('blog_reactions_last_update_nid', 0);

  $where = implode("', '", $types);

  $result = db_query_range("SELECT DISTINCT(n.nid), MAX(br.timestamp) as timestamp FROM {node} n
                              LEFT JOIN {blog_reactions} br ON br.nid = n.nid
                              WHERE n.type IN('". $where ."')
                              AND n.nid > %d
                              AND n.status = 1
                              GROUP BY n.nid
                              ORDER BY n.nid ASC", $last_update_nid, 0, $limit);
  if (db_num_rows($result) == 0) {
    variable_set('blog_reactions_last_update_nid', 0);
  }
  while ($row = db_fetch_object($result)) {
    blog_reactions_update($row->nid);
    variable_set('blog_reactions_last_update_nid', $row->nid);
  }
}

/**
 * 
 */
function blog_reactions_update($nid, $uri = NULL) {
  if (!$uri) {
    $uri = url('node/'. $nid, NULL, NULL, TRUE);
  }
  $reactions = blog_reactions_fetch($nid, $uri);
  blog_reactions_set_items($reactions);
  watchdog('blog_reactions', 'Node '. $nid .' has been updated', WATCHDOG_NOTICE, l('View', 'node/'. $row->nid));
}

/**
 * Theme container for all reactions
 */
function theme_blog_reactions($data = array()) {
  $blog_reactions_quantity = variable_get('blog_reactions_quantity', 0);
  if ($blog_reactions_quantity && count($data)) {
    $result = array_chunk($data, $blog_reactions_quantity, TRUE);
    $data = $result[0];
  }
  $output = '<div class="blog-reactions">';
  $output .= '<h3 class="title">'. t('Blog reactions') .'</h3>';
  foreach ($data as $key => $values) {
    $elements .= theme('blog_reactions_item', $values);
  }
  $output .= $elements ? $elements : t('No reactions yet.');
  $output .= '</div>';
  return $output;
}

/**
 * Theme a reaction item
 */
function theme_blog_reactions_item($data) {
  $output = '<div class="blog-reactions-item">';
  $output .= '<div class="reaction">';
  $output .= '<div class="title">'. l($data->title ? strip_tags($data->title) : 'n/a', url($data->link['href'])) .'</div>';
  $output .= '<span class="submitted">'. format_date($data->published, 'medium') .' — </span>';
  $output .= '<span class="description">'. truncate_utf8(strip_tags($data->content), 180, TRUE, TRUE) .'</span>';
  $output .= '</div>';
  $output .= '</div>';
  return $output;
}

/**
 * Theme container for all reactions
 */
function theme_blog_reactions_block($data = array()) {
  $blog_reactions_block_items = variable_get('blog_reactions_block_items', 10);
  
  $output = '<div class="blog-reactions-block">';
  if (count($data)) {
    if ($blog_reactions_block_items) {
      $result = array_chunk($data, $blog_reactions_block_items, TRUE);
      $data = $result[0];
    }
    
    foreach ($data as $key => $values) {
      $output .= theme('blog_reactions_block_item', $values);
    }
  }
  else {
    $output .= t('No reactions yet.');
  }
  $output .= '</div>';
  return $output;
}

/**
 * Theme a reaction item
 */
function theme_blog_reactions_block_item($data) {
  $items[] = l($data->title ? strip_tags($data->title) : 'n/a', url($data->link['href'])) .'<br />'. t('@time ago', array('@time' => format_interval(time() - $data->published)));
  return theme('item_list', $items);
}

/**
 * Admin settings page
 */
function blog_reactions_admin_settings() {
  $form['blog_reactions_node_types'] = array(
    '#type' => 'select',
    '#title' => t('Node types'),
    '#options' => node_get_types('names'),
    '#default_value' => variable_get('blog_reactions_node_types', array('blog')),
    '#multiple' => TRUE,
    '#description' => t('Choose the node type(s) that should fetch blog reactions.'),
  );
  $form['blog_reactions_services'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Services'),
    '#options' => array(
      'technorati' => t('Technorati'),
      'blogsearch' => t('Google Blogsearch'),
      'bloglines'  => t('Yahoo! Bloglines'),
      'blogato'    => t('blogato'),
    ),
    '#default_value' => variable_get('blog_reactions_services', array('technorati', 'blogsearch', 'bloglines', 'blogato')),
    '#description' => t('Choose the services that should be queried.'),
  );
  $form['blog_reactions_node_display'] = array(
    '#title' => t('Display the reactions underneath the node'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('blog_reactions_node_display', FALSE),
  );
  $form['blog_reactions_quantity'] = array(
    '#type' => 'select',
    '#title' => t('Quantity'),
    '#options' => drupal_map_assoc(array(0,1,2,3,4,5,10,20,30,40,50,75,100)),
    '#default_value' => variable_get('blog_reactions_quantity', 0),
    '#description' => t('Choose the quantity of links, that should be displayed. Choose 0 for no limit.'),
  );
  $form['blog_reactions_cron_quantity'] = array(
    '#type' => 'select',
    '#title' => t('Cron'),
    '#options' => drupal_map_assoc(array(5,10,20,30,40,50,75,100)),
    '#default_value' => variable_get('blog_reactions_cron_quantity', 20),
    '#description' => t('Choose the number of nodes wich will be updated per cron run. Default is 20.'),
  );
  return system_settings_form($form);
}